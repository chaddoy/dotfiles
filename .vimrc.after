" Make Vim more useful
set nocompatible
" Enable mouse in all modes
set t_Co=256
set mouse=a
set ttymouse=xterm2

let html_no_rendering=1
set lazyredraw
set ttyfast

" Default colorscheme
color default
"set background=dark

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Enhance command-line completion
set wildmenu


" Allow cursor keys in insert mode
set esckeys

" Allow backspace in insert mode
set backspace=indent,eol,start

" Add the g flag to search/replace by default
set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Don’t add empty newlines at the end of files
set nobinary
set noeol

" let ; be :
nnoremap ; :

" vim zenroom2
nnoremap <silent> <leader>z :Goyo<cr>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set viminfo=
set nobackup
set nowb
set noswapfile

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Use tabs rather than spaces
set noexpandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500
set ai "Auto indent
set si "Smart indent
set wrap! "Wrap lines

" Respect modeline in files
set modeline
set modelines=4

" Set relativenumber
set relativenumber

" Enable syntax highlighting
syntax on
set omnifunc=syntaxcomplete#Complete

" Highlight current line
set cursorline

" Show “invisible” characters
set lcs=tab:\ \ ,trail:·,eol:¬,nbsp:_
set list

" Highlight searches
set hlsearch

" Ignore case of searches
set ignorecase

" Highlight dynamically as pattern is typed
set incsearch

" Always show status line
set laststatus=2

" Disable error bells
set noerrorbells

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Start scrolling three lines before the horizontal window border
"set scrolloff=9
set scroll=3

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
"set foldlevel=0         "this is just what i use

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
endif

" disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
" see also http://snk.tuxfamily.org/log/vim-256color-bce.html
if &term =~ '256color'
  set t_ut=
endif

" Settings for highlights
"hi SpecialKey ctermbg=NONE
"hi CursorLine cterm=NONE ctermbg=17
"hi Visual ctermbg=17

" this is for vim multiple cursor escape issues
let g:multi_cursor_exit_from_insert_mode = 0

"function! g:UltiSnips_Complete()
  "call UltiSnips#ExpandSnippetOrJump()
  "if g:ulti_expand_or_jump_res == 0
    "if pumvisible()
      "return "\<C-N>"
    "else
      "return "\<TAB>"
    "endif
  "endif

  "return ""
"endfunction

"function! g:UltiSnips_Reverse()
  "call UltiSnips#JumpBackwards()
  "if g:ulti_jump_backwards_res == 0
    "return "\<C-P>"
  "endif

  "return ""
"endfunction

"au BufEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

let g:clang_library_path = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib"

" For Ack
if executable('ag')
	let g:ackprg = 'ag --vimgrep --nogroup --nocolor --column'
elseif executable('ack-grep')
	let g:ackprg ="ack-grep -H --nocolor --nogroup --column"
else
	let g:ackprg ="ack -H --nocolor --nogroup --column"
endif

nmap <leader>a :tab split<CR>:Ack ""<Left>
nmap <leader>A :tab split<CR>:Ack <C-r><C-w><CR>

nmap <leader>r :GoRun<CR>

" Shold fix tabs/space issues
autocmd Filetype python,html,php,jade setlocal ts=4 sts=4 sw=4 expandtab
autocmd Filetype javascript,cucumber,haml,jade,ruby,scala setlocal ts=2 sts=2 sw=2 expandtab
autocmd Filetype go setlocal ts=4 sts=4 sw=4 noexpandtab

"set t_ti= t_te=

" Removes trailing white spaces on save
autocmd BufWritePre * :%s/\s\+$//e

hi CursorLine term=NONE cterm=NONE ctermbg=0
hi Visual term=NONE cterm=NONE ctermbg=17
hi MatchParen ctermbg=darkgray

if &term =~ "xterm\\|rxvt"
	" use an orange cursor in insert mode
	let &t_SI = "\<Esc>]12;orange\x7"
	" use a red cursor otherwise
	let &t_EI = "\<Esc>]12;red\x7"
	silent !echo -ne "\033]12;red\007"
	" reset cursor when vim exits
	autocmd VimLeave * silent !echo -ne "\033]112\007"
	" use \003]12;gray\007 for gnome-terminal
endif

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
